# specify the version of docker-compose
version: "3.8"

# define the services/containers to be run
services:

  traefik:
    image: traefik:v3.0
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"

    ports:
      - "80:80"
      - "8091:8080"  # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

    networks:
      - app-network

  # define the frontend service
  # we can use any name for the service. A standard naming convention is to use "web" for the frontend
  web:
    # we use depends_on to specify that service depends on another service
    # in this case, we specify that the web depends on the api service
    # this means that the api service will be started before the web service
    depends_on: 
      - api
    # specify the build context for the web service
    # this is the directory where the Dockerfile for the web service is located
    build: ./frontend

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`fasthng.mooo.com`)"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    # specify the ports to expose for the web service
    # the first number is the port on the host machine
    # the second number is the port inside the container
    # ports:
    #   - 80:80
    # specify the environment variables for the web service
    # these environment variables will be available inside the container
    environment:
      VITE_API_URL: http://fasthng.mooo.com/api
      #VITE_API_URL: http://localhost:api

    networks:
      - app-network

    # this is for docker compose watch mode
    # anything mentioned under develop will be watched for changes by docker compose watch and it will perform the action mentioned
    develop:
      # we specify the files to watch for changes
      watch:
        # it'll watch for changes in package.json and package-lock.json and rebuild the container if there are any changes
        - path: ./frontend/package.json
          action: rebuild
        - path: ./frontend/package-lock.json
          action: rebuild
        # it'll watch for changes in the frontend directory and sync the changes with the container real time
        - path: ./frontend
          target: /app
          action: sync

  # define the api service/container
  api: 
    # api service depends on the db service so the db service will be started before the api service
    depends_on: 
      - db

    # specify the build context for the api service
    build: ./backend
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`fasthng.mooo.com`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.priority=2"
      - "traefik.http.routers.docs.rule=Host(`fasthng.mooo.com`) && PathPrefix(`/docs`)"
      - "traefik.http.routers.docs.priority=2"
      - "traefik.http.routers.redoc.rule=Host(`fasthng.mooo.com`) && PathPrefix(`/redoc`)"
      - "traefik.http.routers.redoc.priority=2"
      - "traefik.http.services.api.loadbalancer.server.port=8000"

    # specify the ports to expose for the api service
    # the first number is the port on the host machine
    # the second number is the port inside the container
    # ports: 
    #   - 8000:8000

    # specify environment variables for the api service
    # for demo purposes, we're using a local mongodb instance
    environment: 
      POSTGRES_SERVER: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: postgres
      POSTGRES_USER: app
      POSTGRES_PASSWORD: password

    volumes:
      - ./backend:/app

    networks:
      - app-network
      #The healthcheck is added to the db service to check if PostgreSQL is ready to accept connections using pg_isready -U ap
    entrypoint: >
      sh -c "poetry run bash ./prestart.sh && poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000"

    # establish docker compose watch mode for the api service
    develop:
      # specify the files to watch for changes
      watch:
        # it'll watch for changes in package.json and package-lock.json and rebuild the container and image if there are any changes
        - path: ./backend/pyproject.toml
          action: rebuild
        - path: ./backend/poetry.lock
          action: rebuild
        
        # it'll watch for changes in the backend directory and sync the changes with the container real time
        - path: ./backend
          target: /app
          action: sync
    

  # define the db service
  db:
    # specify the image to use for the db service from docker hub. If we have a custom image, we can specify that in this format
    # In the above two services, we're using the build context to build the image for the service from the Dockerfile so we specify the image as "build: ./frontend" or "build: ./backend".
    # but for the db service, we're using the image from docker hub so we specify the image as "image: mongo:latest"
    # you can find the image name and tag for mongodb from docker hub here: https://hub.docker.com/_/mongo
    image: postgres:13

    # specify the ports to expose for the db service
    # generally, we do this in api service using mongodb atlas. But for demo purposes, we're using a local mongodb instance
    # usually, mongodb runs on port 27017. So we're exposing the port 27017 on the host machine and mapping it to the port 27017 inside the container
    
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres

    ports:
      - 5432:5432

    # specify the volumes to mount for the db service
    # we're mounting the volume named "anime" inside the container at /data/db directory
    # this is done so that the data inside the mongodb container is persisted even if the container is stopped
    volumes:
       - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  adminer:
    image: adminer
    ports:
      - 8080:8080
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`db.fasthng.mooo.com`)"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"

    networks:
      - app-network

  proxy:
    image: jc21/nginx-proxy-manager:latest
    ports:
      - 8090:80
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.proxy.rule=Host(`proxy.fasthng.mooo.com`)"
      - "traefik.http.services.proxy.loadbalancer.server.port=80"
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
    networks:
      - app-network
# define the volumes to be used by the services
volumes:
  postgres_data:


networks:
  app-network:
    driver: bridge